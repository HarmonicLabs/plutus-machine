import { DataI, dataFromCbor } from "@harmoniclabs/plutus-data";
import { fromHex } from "@harmoniclabs/uint8array-utils"
import { Application, UPLCConst, UPLCDecoder, prettyUPLC } from "@harmoniclabs/uplc";
import { Machine } from "../Machine";

test("contract", () => {
    
    const bytes = fromHex("01000032323232323232322223232323322533357340022c264a66ae70004580092401046e6f7065003300e3322533357340022c2c292109746f6f206561726c7900337126eb4c03400cc8c94cd5ce1b99325633300c21622260011375a6ae84004d55cf1baa3574260140026ae84c024c8d5d09aba2357446ae88d5d11aba2357446ae880040044c8c8cc040cdd79aba10013574200a266e1cdd69aab9e357426eacd55cf1aba13756601e0026eb4d55cf1aba137566aae78d5d09bab300f300b3233322232332533357346002900008018a999ab9a300148008401058dc39aab9d00135573c0026ea800cccc88c044894ccd5cd1aba3001100f132533357346008002266e952000335740600a00201e260066ae88008d5d08009000919baf35742601a0020046eb0d5d0802131180898069aba100132333332222232332533357346002900008018a999ab9a300148008401054ccd5cd1800a4008200a2a666ae68c0052006100616370e6aae74004d55cf0009baa00530100050010012357420020024c60140026ae84dd6191aba1357446ae88004004c020d5d0800980380118030019bb1499300103d87a8000235573c6ea8004c0088888c8ccc018c010004c00c004008cc01000c0088894ccd55cf8008018998011aba10013574400246460044660040040024600446600400400246ae84d5d1000912999ab9a0020011601");

    const uplc = UPLCDecoder.parse( bytes ).body;

    console.log( prettyUPLC( uplc ) )

    
    const datum = UPLCConst.data(
        dataFromCbor(
            "d8799fd8799fd8799f581c17b8e82b0d280642f3686f732ae997c9176d90a50a6f57583f7a7eb7ffd87a80ff1b0000018f0ef02f57ff"
        )
    );
    const rdmr = UPLCConst.data( new DataI( 0 ) );

    const ctx = UPLCConst.data(
        dataFromCbor(
            "d8799fd8799f9fd8799fd8799fd8799f5820d648ff3d04460bba82966f97456fd222d6b5cf94d6e485039a2c6b239b5dd54bff00ffd8799fd8799fd87a9f581ce8aee0191f34320eee920623fc308d85393fd4d97ab5588b48211e98ffd87a80ffbf40bf401a004c4b40ffffd87b9fd8799fd8799fd8799f581c17b8e82b0d280642f3686f732ae997c9176d90a50a6f57583f7a7eb7ffd87a80ff1b0000018f0ef02f57ffffd87a80ffffd8799fd8799fd8799f5820d648ff3d04460bba82966f97456fd222d6b5cf94d6e485039a2c6b239b5dd54bff01ffd8799fd8799fd8799f581c17b8e82b0d280642f3686f732ae997c9176d90a50a6f57583f7a7eb7ffd87a80ffbf40bf401b00000002536e28ceffffd87980d87a80ffffff809fd8799fd8799fd8799f581c17b8e82b0d280642f3686f732ae997c9176d90a50a6f57583f7a7eb7ffd87a80ffbf40bf401b0000000253b78511ffffd87980d87a80ffffbf40bf401a0002eefdffffbf40bf4000ffff80a0d8799fd8799fd87a9f1b0000018f0ef11a28ffd87980ffd8799fd87b80d87980ffff80bfd87a9fd8799fd8799f5820d648ff3d04460bba82966f97456fd222d6b5cf94d6e485039a2c6b239b5dd54bff00ffff00ffa05820087573c22897a19b1a60d0e092a7014524351f36574abdf24e1d4c21b1ca0ebeffd87a9fd8799fd8799f5820d648ff3d04460bba82966f97456fd222d6b5cf94d6e485039a2c6b239b5dd54bff00ffffff"
        )
    );

    const applied = new Application(
        new Application(
            new Application(
                uplc,
                datum
            ),
            rdmr
        ),
        ctx
    );

    const result = Machine.eval( applied );

    // console.log( result );
    // console.log( (result.result as any).addInfos );

})